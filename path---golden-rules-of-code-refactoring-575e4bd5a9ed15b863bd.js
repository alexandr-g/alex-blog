webpackJsonp([0xaa54fa828b63],{361:function(e,t){e.exports={data:{markdownRemark:{html:'<p>When working on any project you\'ll eventually end up having legacy code which needs to be refactored, dependencies updated, or you\'d like to migrate to a new hot framework.</p>\n<p>Below are some rules which I found helpful to follow while doing refactoring.</p>\n<h2 id="1-make-it-work-then-make-it-better"><a href="#1-make-it-work-then-make-it-better" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. Make it work then make it better</h2>\n<p>Perhaps you moved files, you renamed methods/functions, encapsulate logic in helper utility, now you want to fix tests, fix types, now you start changing logic using a functional approach, then using functions from <code>lodash</code>. Wait, stop, breathe, don\'t rush. </p>\n<p>The first thing to remember after refactoring your application/functionality/component should behave the same way it was before. So first make it work after refactoring then think how to make it better.</p>\n<h2 id="2-do-one-thing-at-a-time"><a href="#2-do-one-thing-at-a-time" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. Do one thing at a time</h2>\n<p>The focus is the key here, define the refactoring scope beforehand and stick to it. No multitasking, no switching to other "quick things" to check. Start with leaves, small and independent parts of your application and then move to more sophisticated stuff.</p>\n<h2 id="3-avoid-premature-optimization"><a href="#3-avoid-premature-optimization" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3. Avoid premature optimization</h2>\n<p>Do not try to optimize what is not written yet. Do not spend much time thinking about optimization on the fly. See rule #1 above. Otherwise, you\'ll lose a lot of time not being able to complete anything.</p>\n<h2 id="4-know-when-to-stop-refactoring-keep-balance"><a href="#4-know-when-to-stop-refactoring-keep-balance" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4. Know when to stop refactoring. Keep balance</h2>\n<p>Related to the previous rule. Knowing when to stop is very important as well as keeping balance. </p>\n<p>Often in code refactoring process, you\'ll find so many code imperfections that could be improved and it\'s hard to resist the temptation to improve it right away. You\'ll need to resist and only refactor what is necessary within your scope. Don\'t make big code changes even bigger. Stop, separate, split for smaller modules and refactor them separately.</p>',timeToRead:1,excerpt:"When working on any project you'll eventually end up having legacy code which needs to be refactored, dependencies updated, or you'd like to…",frontmatter:{title:"Golden rules of code refactoring",cover:"https://images.unsplash.com/photo-1508830524289-0adcbe822b40?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=377e356cce015c363d123504857f8137&auto=format&fit=crop&w=2511&q=80",date:"2018-10-01",category:"tech",tags:["javascript","IT","tech","code","refactoring","programming"],author:"alex"},fields:{slug:"/golden-rules-of-code-refactoring"}},prev:{excerpt:"Back in the September this year, I visited for the first time San Francisco. It was my first visit to the USA…",frontmatter:{title:"Reactathon 2018 React Conference in San Francisco",cover:"https://images.unsplash.com/photo-1449034446853-66c86144b0ad",date:"2018-11-12"},fields:{slug:"/reactathon-2018-react-conference-in-san-francisco"}},next:{excerpt:"Trends in the IT are changing quite often, it is true for the tech stack as well as for the tech positions. New…",frontmatter:{title:"Top well paid IT positions in Germany",cover:"https://images.unsplash.com/photo-1531297484001-80022131f5a1?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=ed86b965826826e3dd08bb3b33726543&auto=format&fit=crop&w=2507&q=80",date:"2018-08-24"},fields:{slug:"/top-well-paid-it-positions-in-germany"}},authors:{edges:[{node:{id:"alex",name:"Alexander Grischuk",image:"https://www.dropbox.com/s/ifvhc39k53udz1e/profile-pic-size.jpg?raw=1",url:"https://www.linkedin.com/in/alxgi/",bio:"Frontend Engineer at Signavio. I like to build apps with React while keeping good UX in mind."}}]}},pathContext:{slug:"/golden-rules-of-code-refactoring",total:6,prev:"/reactathon-2018-react-conference-in-san-francisco",next:"/top-well-paid-it-positions-in-germany"}}}});
//# sourceMappingURL=path---golden-rules-of-code-refactoring-575e4bd5a9ed15b863bd.js.map